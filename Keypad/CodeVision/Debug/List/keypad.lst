
AVRASM ver. 2.1.30  F:\Ali\Altium\Homeworks\Keypad\CodeVision\Debug\List\keypad.asm Sun Mar 26 21:38:44 2023

F:\Ali\Altium\Homeworks\Keypad\CodeVision\Debug\List\keypad.asm(1088): warning: Register r5 already defined by the .DEF directive
F:\Ali\Altium\Homeworks\Keypad\CodeVision\Debug\List\keypad.asm(1089): warning: Register r4 already defined by the .DEF directive
F:\Ali\Altium\Homeworks\Keypad\CodeVision\Debug\List\keypad.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0066 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _shift:
00002a fdfe
00002b f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _keypad_layout:
00002c 3837
00002d 2f39
00002e 3534
00002f 2a36      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x2A
000030 3231
000031 2d33
000032 3043
000033 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x43,0x30,0x3D,0x2B
                 
                 _0x2000003:
000034 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000035 0002      	.DW  0x02
000036 0160      	.DW  __base_y_G100
000037 0068      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000040 e08d      	LDI  R24,(14-2)+1
000041 e0a2      	LDI  R26,2
000042 27bb      	CLR  R27
                 __CLEAR_REG:
000043 93ed      	ST   X+,R30
000044 958a      	DEC  R24
000045 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000046 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000047 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000048 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000049 93ed      	ST   X+,R30
00004a 9701      	SBIW R24,1
00004b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004c e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004e 9185      	LPM  R24,Z+
00004f 9195      	LPM  R25,Z+
000050 9700      	SBIW R24,0
000051 f061      	BREQ __GLOBAL_INI_END
000052 91a5      	LPM  R26,Z+
000053 91b5      	LPM  R27,Z+
000054 9005      	LPM  R0,Z+
000055 9015      	LPM  R1,Z+
000056 01bf      	MOVW R22,R30
000057 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000058 9005      	LPM  R0,Z+
000059 920d      	ST   X+,R0
00005a 9701      	SBIW R24,1
00005b f7e1      	BRNE __GLOBAL_INI_LOOP
00005c 01fb      	MOVW R30,R22
00005d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005f bfed      	OUT  SPL,R30
000060 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000061 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000062 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000063 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000064 940c 008d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;#define C0 PIND.4
                 ;#define C1 PIND.5
                 ;#define C2 PIND.6
                 ;#define C3 PIND.7
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;char keypad(void);
                 ;flash char shift[4] = {0xFE, 0xFD, 0xFB, 0xF7}  ; // Why char ?? Cuz it is 8 bits !!!
                 ;  //0b111 0111
                 ;flash char keypad_layout[4][4] = {'7','8','9','/','4','5','6','*','1','2','3','-','C','0','=','+'};
                 ;
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0014 {
                 
                 	.CSEG
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000066 920a      	ST   -Y,R0
000067 921a      	ST   -Y,R1
000068 92fa      	ST   -Y,R15
000069 936a      	ST   -Y,R22
00006a 937a      	ST   -Y,R23
00006b 938a      	ST   -Y,R24
00006c 939a      	ST   -Y,R25
00006d 93aa      	ST   -Y,R26
00006e 93ba      	ST   -Y,R27
00006f 93ea      	ST   -Y,R30
000070 93fa      	ST   -Y,R31
000071 b7ef      	IN   R30,SREG
000072 93ea      	ST   -Y,R30
                 ; 0000 0015  char charecter ;
                 ; 0000 0016       charecter = keypad();
000073 931a      	ST   -Y,R17
                 ;	charecter -> R17
000074 d029      	RCALL _keypad
000075 2f1e      	MOV  R17,R30
                 ; 0000 0017        PORTD  = 0xF0;
000076 efe0      	LDI  R30,LOW(240)
000077 bbe2      	OUT  0x12,R30
                 ; 0000 0018          if(charecter == 'C') lcd_clear();
000078 3413      	CPI  R17,67
000079 f411      	BRNE _0x3
00007a d09c      	RCALL _lcd_clear
                 ; 0000 0019          else
00007b c002      	RJMP _0x4
                 _0x3:
                 ; 0000 001A              lcd_putchar(charecter);
00007c 2fa1      	MOV  R26,R17
00007d d0a3      	RCALL _lcd_putchar
                 ; 0000 001B 
                 ; 0000 001C }
                 _0x4:
00007e 9119      	LD   R17,Y+
00007f 91e9      	LD   R30,Y+
000080 bfef      	OUT  SREG,R30
000081 91f9      	LD   R31,Y+
000082 91e9      	LD   R30,Y+
000083 91b9      	LD   R27,Y+
000084 91a9      	LD   R26,Y+
000085 9199      	LD   R25,Y+
000086 9189      	LD   R24,Y+
000087 9179      	LD   R23,Y+
000088 9169      	LD   R22,Y+
000089 90f9      	LD   R15,Y+
00008a 9019      	LD   R1,Y+
00008b 9009      	LD   R0,Y+
00008c 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 001F {
                 _main:
                 ; .FSTART _main
                 ; 0000 0020 // Declare your local variables here
                 ; 0000 0021 
                 ; 0000 0022     PORTD  = 0xF0;
00008d efe0      	LDI  R30,LOW(240)
00008e bbe2      	OUT  0x12,R30
                 ; 0000 0023     DDRD = 0x0F ;
00008f e0ef      	LDI  R30,LOW(15)
000090 bbe1      	OUT  0x11,R30
                 ; 0000 0024     lcd_init(16);
000091 e1a0      	LDI  R26,LOW(16)
000092 d0a2      	RCALL _lcd_init
                 ; 0000 0025 // External Interrupt(s) initialization
                 ; 0000 0026 // INT0: Off
                 ; 0000 0027 // INT1: Off
                 ; 0000 0028 // INT2: On
                 ; 0000 0029 // INT2 Mode: Falling Edge
                 ; 0000 002A GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
000093 b7eb      	IN   R30,0x3B
000094 62e0      	ORI  R30,0x20
000095 bfeb      	OUT  0x3B,R30
                 ; 0000 002B MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000096 e0e0      	LDI  R30,LOW(0)
000097 bfe5      	OUT  0x35,R30
                 ; 0000 002C MCUCSR=(0<<ISC2);
000098 bfe4      	OUT  0x34,R30
                 ; 0000 002D GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2)  ;
000099 e2e0      	LDI  R30,LOW(32)
00009a bfea      	OUT  0x3A,R30
                 ; 0000 002E 
                 ; 0000 002F // Global enable interrupts
                 ; 0000 0030 #asm("sei")
00009b 9478      	sei
                 ; 0000 0031 
                 ; 0000 0032 
                 ; 0000 0033 
                 ; 0000 0034 while (1)
                 _0x5:
                 ; 0000 0035       {
                 ; 0000 0036 
                 ; 0000 0037 
                 ; 0000 0038       }
00009c cfff      	RJMP _0x5
                 ; 0000 0039 }
                 _0x8:
00009d cfff      	RJMP _0x8
                 ; .FEND
                 ;
                 ;char keypad(void)
                 ; 0000 003C {
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 003D int row = 0 , column = -1 , position = 0   ;
                 ; 0000 003E //while(1)
                 ; 0000 003F //{
                 ; 0000 0040 
                 ; 0000 0041  for ( row = 0 ; row < 4 ; row ++ )
00009e 940e 0179 	CALL __SAVELOCR6
                 ;	row -> R16,R17
                 ;	column -> R18,R19
                 ;	position -> R20,R21
                +
0000a0 e000     +LDI R16 , LOW ( 0 )
0000a1 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000a2 ef2f     +LDI R18 , LOW ( - 1 )
0000a3 ef3f     +LDI R19 , HIGH ( - 1 )
                 	__GETWRN 18,19,-1
                +
0000a4 e040     +LDI R20 , LOW ( 0 )
0000a5 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                +
0000a6 e000     +LDI R16 , LOW ( 0 )
0000a7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xA:
                +
0000a8 3004     +CPI R16 , LOW ( 4 )
0000a9 e0e0     +LDI R30 , HIGH ( 4 )
0000aa 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
0000ab f5d4      	BRGE _0xB
                 ; 0000 0042  {
                 ; 0000 0043      PORTD = shift[row];
0000ac 01f8      	MOVW R30,R16
0000ad 5aec      	SUBI R30,LOW(-_shift*2)
0000ae 4fff      	SBCI R31,HIGH(-_shift*2)
0000af 9004      	LPM  R0,Z
0000b0 ba02      	OUT  0x12,R0
                 ; 0000 0044      if(C0 == 0) {column = 0 ;}
0000b1 9984      	SBIC 0x10,4
0000b2 c002      	RJMP _0xC
                +
0000b3 e020     +LDI R18 , LOW ( 0 )
0000b4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0045      if(C1 == 0) {column = 1 ;}
                 _0xC:
0000b5 9985      	SBIC 0x10,5
0000b6 c002      	RJMP _0xD
                +
0000b7 e021     +LDI R18 , LOW ( 1 )
0000b8 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 0046      if(C2 == 0) {column = 2 ;}
                 _0xD:
0000b9 9986      	SBIC 0x10,6
0000ba c002      	RJMP _0xE
                +
0000bb e022     +LDI R18 , LOW ( 2 )
0000bc e030     +LDI R19 , HIGH ( 2 )
                 	__GETWRN 18,19,2
                 ; 0000 0047      if(C3 == 0) {column = 3 ;}
                 _0xE:
0000bd 9987      	SBIC 0x10,7
0000be c002      	RJMP _0xF
                +
0000bf e023     +LDI R18 , LOW ( 3 )
0000c0 e030     +LDI R19 , HIGH ( 3 )
                 	__GETWRN 18,19,3
                 ; 0000 0048      if(column != -1)
                 _0xF:
0000c1 efef      	LDI  R30,LOW(65535)
0000c2 efff      	LDI  R31,HIGH(65535)
0000c3 17e2      	CP   R30,R18
0000c4 07f3      	CPC  R31,R19
0000c5 f0c9      	BREQ _0x10
                 ; 0000 0049          {
                 ; 0000 004A             position = row * 4 + column ;
0000c6 01f8      	MOVW R30,R16
0000c7 940e 0174 	CALL __LSLW2
0000c9 0fe2      	ADD  R30,R18
0000ca 1ff3      	ADC  R31,R19
0000cb 01af      	MOVW R20,R30
                 ; 0000 004B             //lcd_putchar(keypad_layout[position]);
                 ; 0000 004C             //lcd_putchar(keypad_layout[row][column]) ;
                 ; 0000 004D 
                 ; 0000 004E             while(C0 == 0 ){;}
                 _0x11:
0000cc 9b84      	SBIS 0x10,4
0000cd cffe      	RJMP _0x11
                 ; 0000 004F             while(C1 == 0 ){;}
                 _0x14:
0000ce 9b85      	SBIS 0x10,5
0000cf cffe      	RJMP _0x14
                 ; 0000 0050             while(C2 == 0 ){;}
                 _0x17:
0000d0 9b86      	SBIS 0x10,6
0000d1 cffe      	RJMP _0x17
                 ; 0000 0051             while(C3 == 0 ){;}
                 _0x1A:
0000d2 9b87      	SBIS 0x10,7
0000d3 cffe      	RJMP _0x1A
                 ; 0000 0052             //return keypad_layout[position] ; // one dimensional array
                 ; 0000 0053             return keypad_layout[row][column];
0000d4 01f8      	MOVW R30,R16
0000d5 e5a8      	LDI  R26,LOW(_keypad_layout*2)
0000d6 e0b0      	LDI  R27,HIGH(_keypad_layout*2)
0000d7 940e 0174 	CALL __LSLW2
0000d9 0fea      	ADD  R30,R26
0000da 1ffb      	ADC  R31,R27
0000db 0fe2      	ADD  R30,R18
0000dc 1ff3      	ADC  R31,R19
0000dd 91e4      	LPM  R30,Z
0000de c007      	RJMP _0x2020002
                 ; 0000 0054             column = -1 ;
                 ; 0000 0055          }
                 ; 0000 0056      delay_ms(50);
                 _0x10:
0000df e3a2      	LDI  R26,LOW(50)
0000e0 e0b0      	LDI  R27,0
0000e1 940e 016a 	CALL _delay_ms
                 ; 0000 0057  }
                +
0000e3 5f0f     +SUBI R16 , LOW ( - 1 )
0000e4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000e5 cfc2      	RJMP _0xA
                 _0xB:
                 ; 0000 0058  //}
                 ; 0000 0059 }
                 _0x2020002:
0000e6 940e 0180 	CALL __LOADLOCR6
0000e8 9626      	ADIW R28,6
0000e9 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000ea 93aa      	ST   -Y,R26
0000eb b3eb      	IN   R30,0x1B
0000ec 70ef      	ANDI R30,LOW(0xF)
0000ed 2fae      	MOV  R26,R30
0000ee 81e8      	LD   R30,Y
0000ef 7fe0      	ANDI R30,LOW(0xF0)
0000f0 2bea      	OR   R30,R26
0000f1 bbeb      	OUT  0x1B,R30
                +
0000f2 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000f3 958a     +DEC R24
0000f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000f5 9ada      	SBI  0x1B,2
                +
0000f6 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000f7 958a     +DEC R24
0000f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000f9 98da      	CBI  0x1B,2
                +
0000fa e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0000fb 958a     +DEC R24
0000fc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0000fd c05f      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000fe 93aa      	ST   -Y,R26
0000ff 81a8      	LD   R26,Y
000100 dfe9      	RCALL __lcd_write_nibble_G100
000101 81e8          ld    r30,y
000102 95e2          swap  r30
000103 83e8          st    y,r30
000104 81a8      	LD   R26,Y
000105 dfe4      	RCALL __lcd_write_nibble_G100
                +
000106 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
000107 958a     +DEC R24
000108 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000109 c053      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00010a 93aa      	ST   -Y,R26
00010b 81e8      	LD   R30,Y
00010c e0f0      	LDI  R31,0
00010d 5ae0      	SUBI R30,LOW(-__base_y_G100)
00010e 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00010f 81e0      	LD   R30,Z
000110 81a9      	LDD  R26,Y+1
000111 0fae      	ADD  R26,R30
000112 dfeb      	RCALL __lcd_write_data
000113 8059      	LDD  R5,Y+1
000114 8048      	LDD  R4,Y+0
000115 9622      	ADIW R28,2
000116 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000117 e0a2      	LDI  R26,LOW(2)
000118 d046      	RCALL SUBOPT_0x0
000119 e0ac      	LDI  R26,LOW(12)
00011a dfe3      	RCALL __lcd_write_data
00011b e0a1      	LDI  R26,LOW(1)
00011c d042      	RCALL SUBOPT_0x0
00011d e0e0      	LDI  R30,LOW(0)
00011e 2e4e      	MOV  R4,R30
00011f 2e5e      	MOV  R5,R30
000120 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000121 93aa      	ST   -Y,R26
000122 81a8      	LD   R26,Y
000123 30aa      	CPI  R26,LOW(0xA)
000124 f011      	BREQ _0x2000005
000125 1457      	CP   R5,R7
000126 f040      	BRLO _0x2000004
                 _0x2000005:
000127 e0e0      	LDI  R30,LOW(0)
000128 93ea      	ST   -Y,R30
000129 9443      	INC  R4
00012a 2da4      	MOV  R26,R4
00012b dfde      	RCALL _lcd_gotoxy
00012c 81a8      	LD   R26,Y
00012d 30aa      	CPI  R26,LOW(0xA)
00012e f171      	BREQ _0x2020001
                 _0x2000004:
00012f 9453      	INC  R5
000130 9ad8      	SBI  0x1B,0
000131 81a8      	LD   R26,Y
000132 dfcb      	RCALL __lcd_write_data
000133 98d8      	CBI  0x1B,0
000134 c028      	RJMP _0x2020001
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000135 93aa      	ST   -Y,R26
000136 b3ea      	IN   R30,0x1A
000137 6fe0      	ORI  R30,LOW(0xF0)
000138 bbea      	OUT  0x1A,R30
000139 9ad2      	SBI  0x1A,2
00013a 9ad0      	SBI  0x1A,0
00013b 9ad1      	SBI  0x1A,1
00013c 98da      	CBI  0x1B,2
00013d 98d8      	CBI  0x1B,0
00013e 98d9      	CBI  0x1B,1
00013f 8078      	LDD  R7,Y+0
000140 81e8      	LD   R30,Y
000141 58e0      	SUBI R30,-LOW(128)
                +
000142 93e0 0162+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000144 81e8      	LD   R30,Y
000145 54e0      	SUBI R30,-LOW(192)
                +
000146 93e0 0163+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000148 e1a4      	LDI  R26,LOW(20)
000149 e0b0      	LDI  R27,0
00014a 940e 016a 	CALL _delay_ms
00014c d017      	RCALL SUBOPT_0x1
00014d d016      	RCALL SUBOPT_0x1
00014e d015      	RCALL SUBOPT_0x1
00014f e2a0      	LDI  R26,LOW(32)
000150 df99      	RCALL __lcd_write_nibble_G100
                +
000151 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000152 958a     +DEC R24
000153 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000154 e2a8      	LDI  R26,LOW(40)
000155 dfa8      	RCALL __lcd_write_data
000156 e0a4      	LDI  R26,LOW(4)
000157 dfa6      	RCALL __lcd_write_data
000158 e8a5      	LDI  R26,LOW(133)
000159 dfa4      	RCALL __lcd_write_data
00015a e0a6      	LDI  R26,LOW(6)
00015b dfa2      	RCALL __lcd_write_data
00015c dfba      	RCALL _lcd_clear
                 _0x2020001:
00015d 9621      	ADIW R28,1
00015e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00015f df9e      	RCALL __lcd_write_data
000160 e0a3      	LDI  R26,LOW(3)
000161 e0b0      	LDI  R27,0
000162 940c 016a 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000164 e3a0      	LDI  R26,LOW(48)
000165 df84      	RCALL __lcd_write_nibble_G100
                +
000166 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000167 958a     +DEC R24
000168 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000169 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00016a 9610      	adiw r26,0
00016b f039      	breq __delay_ms1
                 __delay_ms0:
                +
00016c ef8a     +LDI R24 , LOW ( 0xFA )
00016d e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
00016e 9701     +SBIW R24 , 1
00016f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000170 95a8      	wdr
000171 9711      	sbiw r26,1
000172 f7c9      	brne __delay_ms0
                 __delay_ms1:
000173 9508      	ret
                 
                 __LSLW2:
000174 0fee      	LSL  R30
000175 1fff      	ROL  R31
000176 0fee      	LSL  R30
000177 1fff      	ROL  R31
000178 9508      	RET
                 
                 __SAVELOCR6:
000179 935a      	ST   -Y,R21
                 __SAVELOCR5:
00017a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00017b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00017c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00017d 931a      	ST   -Y,R17
00017e 930a      	ST   -Y,R16
00017f 9508      	RET
                 
                 __LOADLOCR6:
000180 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000181 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000182 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000183 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000184 8119      	LDD  R17,Y+1
000185 8108      	LD   R16,Y
000186 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   8 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   9 r17:  11 r18:  10 r19:  10 r20:   4 r21:   3 r22:   4 r23:   2 
r24:  23 r25:   5 r26:  40 r27:   9 r28:   4 r29:   1 r30:  78 r31:  15 
x  :   3 y  :  59 z  :  10 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   4 
adiw  :   4 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   6 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   2 cpi   :   4 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   2 jmp   :  23 ld    :  25 ldd   :   9 ldi   :  65 
lds   :   0 lpm   :  11 lsl   :   2 lsr   :   0 mov   :   6 movw  :   7 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  17 pop   :   0 push  :   0 rcall :  23 ret   :   9 
reti  :   1 rjmp  :  17 rol   :   2 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :   5 sbic  :   4 sbis  :   4 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  29 std   :   0 sts   :   2 sub   :   0 subi  :   5 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 45 out of 116 (38.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00030e    752     30    782   16384   4.8%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
