
AVRASM ver. 2.1.30  F:\Ali\Altium\Homeworks\7Seg_8digits\Debug\List\7Seg_8digits.asm Sun Mar 26 20:04:44 2023

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0069 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _display:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 
                 _0x3:
00002f 614e
F:\Ali\Altium\Homeworks\7Seg_8digits\Debug\List\7Seg_8digits.asm(1121): warning: .cseg .db misalignment - padding zero byte
000030 00bc      	.DB  0x4E,0x61,0xBC
                 _0x4:
000031 0201
000032 0403
000033 0605
000034 0807      	.DB  0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8
                 
                 __GLOBAL_INI_TBL:
000035 0003      	.DW  0x03
000036 0160      	.DW  _n
000037 005e      	.DW  _0x3*2
                 
000038 0008      	.DW  0x08
000039 0164      	.DW  _myNumber
00003a 0062      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 008e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;flash char display [10] = {0x3f, 0x06,0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
                 ;long int n = 12345678;
                 
                 	.DSEG
                 ;char myNumber[8] = {1,2,3,4,5,6,7,8} ;
                 ;void fill_myNumber(void);
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 000A {
                 
                 	.CSEG
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000069 920a      	ST   -Y,R0
00006a 921a      	ST   -Y,R1
00006b 92fa      	ST   -Y,R15
00006c 936a      	ST   -Y,R22
00006d 937a      	ST   -Y,R23
00006e 938a      	ST   -Y,R24
00006f 939a      	ST   -Y,R25
000070 93aa      	ST   -Y,R26
000071 93ba      	ST   -Y,R27
000072 93ea      	ST   -Y,R30
000073 93fa      	ST   -Y,R31
000074 b7ef      	IN   R30,SREG
000075 93ea      	ST   -Y,R30
                 ; 0000 000B  n-- ; fill_myNumber();
000076 e6a0      	LDI  R26,LOW(_n)
000077 e0b1      	LDI  R27,HIGH(_n)
000078 940e 0192 	CALL __GETD1P_INC
00007a 9731      	SBIW R30,1
00007b 4060      	SBCI R22,0
00007c 4070      	SBCI R23,0
00007d 940e 0197 	CALL __PUTDP1_DEC
00007f d054      	RCALL _fill_myNumber
                 ; 0000 000C 
                 ; 0000 000D }
000080 91e9      	LD   R30,Y+
000081 bfef      	OUT  SREG,R30
000082 91f9      	LD   R31,Y+
000083 91e9      	LD   R30,Y+
000084 91b9      	LD   R27,Y+
000085 91a9      	LD   R26,Y+
000086 9199      	LD   R25,Y+
000087 9189      	LD   R24,Y+
000088 9179      	LD   R23,Y+
000089 9169      	LD   R22,Y+
00008a 90f9      	LD   R15,Y+
00008b 9019      	LD   R1,Y+
00008c 9009      	LD   R0,Y+
00008d 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0010 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0011 // Declare your local variables here
                 ; 0000 0012     int counter =0  ;
                 ; 0000 0013     char pd = 0x01 ;
                 ; 0000 0014 //    char temp ;
                 ; 0000 0015 // Input/Output Ports initialization
                 ; 0000 0016 // Port A initialization
                 ; 0000 0017 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0018 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
                 ;	counter -> R16,R17
                 ;	pd -> R19
                +
00008e e000     +LDI R16 , LOW ( 0 )
00008f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000090 e031      	LDI  R19,1
000091 e0e0      	LDI  R30,LOW(0)
000092 bbea      	OUT  0x1A,R30
                 ; 0000 0019 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 001A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000093 bbeb      	OUT  0x1B,R30
                 ; 0000 001B 
                 ; 0000 001C // Port B initialization
                 ; 0000 001D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 001E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000094 bbe7      	OUT  0x17,R30
                 ; 0000 001F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0020 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (1<<PORTB2) | (0<<PORTB1) | (1<<PORTB0); //P ...
000095 e0e5      	LDI  R30,LOW(5)
000096 bbe8      	OUT  0x18,R30
                 ; 0000 0021 
                 ; 0000 0022 // Port C initialization
                 ; 0000 0023 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0024 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000097 efef      	LDI  R30,LOW(255)
000098 bbe4      	OUT  0x14,R30
                 ; 0000 0025 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0026 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000099 e0e0      	LDI  R30,LOW(0)
00009a bbe5      	OUT  0x15,R30
                 ; 0000 0027 
                 ; 0000 0028 // Port D initialization
                 ; 0000 0029 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 002A DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
00009b efef      	LDI  R30,LOW(255)
00009c bbe1      	OUT  0x11,R30
                 ; 0000 002B // State: Bit7=1 Bit6=1 Bit5=1 Bit4=1 Bit3=1 Bit2=1 Bit1=1 Bit0=0
                 ; 0000 002C PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (1<<PORTD1) | (1<<PORTD0);
00009d bbe2      	OUT  0x12,R30
                 ; 0000 002D //PORTC = display[2] ;
                 ; 0000 002E 
                 ; 0000 002F // External Interrupt(s) initialization
                 ; 0000 0030 // INT0: Off
                 ; 0000 0031 // INT1: Off
                 ; 0000 0032 // INT2: On
                 ; 0000 0033 // INT2 Mode: Falling Edge
                 ; 0000 0034 GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
00009e b7eb      	IN   R30,0x3B
00009f 62e0      	ORI  R30,0x20
0000a0 bfeb      	OUT  0x3B,R30
                 ; 0000 0035 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bfe5      	OUT  0x35,R30
                 ; 0000 0036 MCUCSR=(0<<ISC2);
0000a3 bfe4      	OUT  0x34,R30
                 ; 0000 0037 GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2)  ;
0000a4 e2e0      	LDI  R30,LOW(32)
0000a5 bfea      	OUT  0x3A,R30
                 ; 0000 0038 
                 ; 0000 0039 // Global enable interrupts
                 ; 0000 003A #asm("sei")
0000a6 9478      	sei
                 ; 0000 003B 
                 ; 0000 003C 
                 ; 0000 003D while (1)
                 _0x5:
                 ; 0000 003E       {
                 ; 0000 003F       // Place your code here
                 ; 0000 0040        pd= 0x01 ;
0000a7 e031      	LDI  R19,LOW(1)
                 ; 0000 0041       for ( counter = 0 ; counter < 8 ; counter ++)
                +
0000a8 e000     +LDI R16 , LOW ( 0 )
0000a9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x9:
                +
0000aa 3008     +CPI R16 , LOW ( 8 )
0000ab e0e0     +LDI R30 , HIGH ( 8 )
0000ac 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0000ad f4ac      	BRGE _0xA
                 ; 0000 0042       {
                 ; 0000 0043       delay_ms(5);
0000ae e0a5      	LDI  R26,LOW(5)
0000af e0b0      	LDI  R27,0
0000b0 940e 012f 	CALL _delay_ms
                 ; 0000 0044       PORTD = ~pd ;
0000b2 2fe3      	MOV  R30,R19
0000b3 95e0      	COM  R30
0000b4 bbe2      	OUT  0x12,R30
                 ; 0000 0045       PORTC  = display[ myNumber[counter]];
0000b5 e6a4      	LDI  R26,LOW(_myNumber)
0000b6 e0b1      	LDI  R27,HIGH(_myNumber)
0000b7 0fa0      	ADD  R26,R16
0000b8 1fb1      	ADC  R27,R17
0000b9 91ec      	LD   R30,X
0000ba e0f0      	LDI  R31,0
0000bb 5aec      	SUBI R30,LOW(-_display*2)
0000bc 4fff      	SBCI R31,HIGH(-_display*2)
0000bd 9004      	LPM  R0,Z
0000be ba05      	OUT  0x15,R0
                 ; 0000 0046       pd = pd << 1 ;
0000bf 0f33      	LSL  R19
                 ; 0000 0047       }
                +
0000c0 5f0f     +SUBI R16 , LOW ( - 1 )
0000c1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000c2 cfe7      	RJMP _0x9
                 _0xA:
                 ; 0000 0048       if(PINB.0 == 0){ n++; fill_myNumber();
0000c3 99b0      	SBIC 0x16,0
0000c4 c00d      	RJMP _0xB
0000c5 e6a0      	LDI  R26,LOW(_n)
0000c6 e0b1      	LDI  R27,HIGH(_n)
0000c7 940e 0192 	CALL __GETD1P_INC
                +
0000c9 5fef     +SUBI R30 , LOW ( - 1 )
0000ca 4fff     +SBCI R31 , HIGH ( - 1 )
0000cb 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0000cc 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
0000cd 940e 0197 	CALL __PUTDP1_DEC
0000cf d004      	RCALL _fill_myNumber
                 ; 0000 0049       while (PINB.0 ==0) {} ;}
                 _0xC:
0000d0 9bb0      	SBIS 0x16,0
0000d1 cffe      	RJMP _0xC
                 ; 0000 004A //      if(PINB.2 == 0 ){ n-- ; fill_myNumber();
                 ; 0000 004B //      while (PINB.2 == 0 ) {};}
                 ; 0000 004C      }
                 _0xB:
0000d2 cfd4      	RJMP _0x5
                 ; 0000 004D }
                 _0xF:
0000d3 cfff      	RJMP _0xF
                 ; .FEND
                 ;
                 ;
                 ;void fill_myNumber()
                 ; 0000 0051 {
                 _fill_myNumber:
                 ; .FSTART _fill_myNumber
                 ; 0000 0052     myNumber[7] = n%10 ;
0000d4 d039      	RCALL SUBOPT_0x0
0000d5 940e 016b 	CALL __MODD21
                +
0000d7 93e0 016b+STS _myNumber + ( 7 ) , R30
                 	__PUTB1MN _myNumber,7
                 ; 0000 0053     myNumber[6] = (n/10)%10 ;
0000d9 d034      	RCALL SUBOPT_0x0
0000da d040      	RCALL SUBOPT_0x1
                +
0000db 93e0 016a+STS _myNumber + ( 6 ) , R30
                 	__PUTB1MN _myNumber,6
                 ; 0000 0054     myNumber[5] = (n/100)%10 ;
0000dd d048      	RCALL SUBOPT_0x2
                +
0000de e6e4     +LDI R30 , LOW ( 0x64 )
0000df e0f0     +LDI R31 , HIGH ( 0x64 )
0000e0 e060     +LDI R22 , BYTE3 ( 0x64 )
0000e1 e070     +LDI R23 , BYTE4 ( 0x64 )
                 	__GETD1N 0x64
0000e2 d038      	RCALL SUBOPT_0x1
                +
0000e3 93e0 0169+STS _myNumber + ( 5 ) , R30
                 	__PUTB1MN _myNumber,5
                 ; 0000 0055     myNumber[4] = (n/1000)%10 ;
0000e5 d040      	RCALL SUBOPT_0x2
                +
0000e6 eee8     +LDI R30 , LOW ( 0x3E8 )
0000e7 e0f3     +LDI R31 , HIGH ( 0x3E8 )
0000e8 e060     +LDI R22 , BYTE3 ( 0x3E8 )
0000e9 e070     +LDI R23 , BYTE4 ( 0x3E8 )
                 	__GETD1N 0x3E8
0000ea d030      	RCALL SUBOPT_0x1
                +
0000eb 93e0 0168+STS _myNumber + ( 4 ) , R30
                 	__PUTB1MN _myNumber,4
                 ; 0000 0056     myNumber[3] = (n/10000)%10 ;
0000ed d038      	RCALL SUBOPT_0x2
                +
0000ee e1e0     +LDI R30 , LOW ( 0x2710 )
0000ef e2f7     +LDI R31 , HIGH ( 0x2710 )
0000f0 e060     +LDI R22 , BYTE3 ( 0x2710 )
0000f1 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0000f2 d028      	RCALL SUBOPT_0x1
                +
0000f3 93e0 0167+STS _myNumber + ( 3 ) , R30
                 	__PUTB1MN _myNumber,3
                 ; 0000 0057     myNumber[2] = (n/100000)%10 ;
0000f5 d030      	RCALL SUBOPT_0x2
                +
0000f6 eae0     +LDI R30 , LOW ( 0x186A0 )
0000f7 e8f6     +LDI R31 , HIGH ( 0x186A0 )
0000f8 e061     +LDI R22 , BYTE3 ( 0x186A0 )
0000f9 e070     +LDI R23 , BYTE4 ( 0x186A0 )
                 	__GETD1N 0x186A0
0000fa d020      	RCALL SUBOPT_0x1
                +
0000fb 93e0 0166+STS _myNumber + ( 2 ) , R30
                 	__PUTB1MN _myNumber,2
                 ; 0000 0058     myNumber[1] = (n/1000000)%10 ;
0000fd d028      	RCALL SUBOPT_0x2
                +
0000fe e4e0     +LDI R30 , LOW ( 0xF4240 )
0000ff e4f2     +LDI R31 , HIGH ( 0xF4240 )
000100 e06f     +LDI R22 , BYTE3 ( 0xF4240 )
000101 e070     +LDI R23 , BYTE4 ( 0xF4240 )
                 	__GETD1N 0xF4240
000102 d018      	RCALL SUBOPT_0x1
                +
000103 93e0 0165+STS _myNumber + ( 1 ) , R30
                 	__PUTB1MN _myNumber,1
                 ; 0000 0059     myNumber[0] = (n/10000000)%10 ;
000105 d020      	RCALL SUBOPT_0x2
                +
000106 e8e0     +LDI R30 , LOW ( 0x989680 )
000107 e9f6     +LDI R31 , HIGH ( 0x989680 )
000108 e968     +LDI R22 , BYTE3 ( 0x989680 )
000109 e070     +LDI R23 , BYTE4 ( 0x989680 )
                 	__GETD1N 0x989680
00010a d010      	RCALL SUBOPT_0x1
00010b 93e0 0164 	STS  _myNumber,R30
                 ; 0000 005A 
                 ; 0000 005B }
00010d 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _n:
000160           	.BYTE 0x4
                 _myNumber:
000164           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
00010e 91a0 0160 	LDS  R26,_n
000110 91b0 0161 	LDS  R27,_n+1
000112 9180 0162 	LDS  R24,_n+2
000114 9190 0163 	LDS  R25,_n+3
                +
000116 e0ea     +LDI R30 , LOW ( 0xA )
000117 e0f0     +LDI R31 , HIGH ( 0xA )
000118 e060     +LDI R22 , BYTE3 ( 0xA )
000119 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00011a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:45 WORDS
                 SUBOPT_0x1:
00011b 940e 0166 	CALL __DIVD21
00011d 01df      	MOVW R26,R30
00011e 01cb      	MOVW R24,R22
                +
00011f e0ea     +LDI R30 , LOW ( 0xA )
000120 e0f0     +LDI R31 , HIGH ( 0xA )
000121 e060     +LDI R22 , BYTE3 ( 0xA )
000122 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000123 940e 016b 	CALL __MODD21
000125 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x2:
000126 91a0 0160 	LDS  R26,_n
000128 91b0 0161 	LDS  R27,_n+1
00012a 9180 0162 	LDS  R24,_n+2
00012c 9190 0163 	LDS  R25,_n+3
00012e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00012f 9610      	adiw r26,0
000130 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000131 ef8a     +LDI R24 , LOW ( 0xFA )
000132 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000133 9701     +SBIW R24 , 1
000134 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000135 95a8      	wdr
000136 9711      	sbiw r26,1
000137 f7c9      	brne __delay_ms0
                 __delay_ms1:
000138 9508      	ret
                 
                 __ANEGD1:
000139 95f0      	COM  R31
00013a 9560      	COM  R22
00013b 9570      	COM  R23
00013c 95e1      	NEG  R30
00013d 4fff      	SBCI R31,-1
00013e 4f6f      	SBCI R22,-1
00013f 4f7f      	SBCI R23,-1
000140 9508      	RET
                 
                 __DIVD21U:
000141 933f      	PUSH R19
000142 934f      	PUSH R20
000143 935f      	PUSH R21
000144 2400      	CLR  R0
000145 2411      	CLR  R1
000146 2744      	CLR  R20
000147 2755      	CLR  R21
000148 e230      	LDI  R19,32
                 __DIVD21U1:
000149 0faa      	LSL  R26
00014a 1fbb      	ROL  R27
00014b 1f88      	ROL  R24
00014c 1f99      	ROL  R25
00014d 1c00      	ROL  R0
00014e 1c11      	ROL  R1
00014f 1f44      	ROL  R20
000150 1f55      	ROL  R21
000151 1a0e      	SUB  R0,R30
000152 0a1f      	SBC  R1,R31
000153 0b46      	SBC  R20,R22
000154 0b57      	SBC  R21,R23
000155 f428      	BRCC __DIVD21U2
000156 0e0e      	ADD  R0,R30
000157 1e1f      	ADC  R1,R31
000158 1f46      	ADC  R20,R22
000159 1f57      	ADC  R21,R23
00015a c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00015b 60a1      	SBR  R26,1
                 __DIVD21U3:
00015c 953a      	DEC  R19
00015d f759      	BRNE __DIVD21U1
00015e 01fd      	MOVW R30,R26
00015f 01bc      	MOVW R22,R24
000160 01d0      	MOVW R26,R0
000161 01ca      	MOVW R24,R20
000162 915f      	POP  R21
000163 914f      	POP  R20
000164 913f      	POP  R19
000165 9508      	RET
                 
                 __DIVD21:
000166 d018      	RCALL __CHKSIGND
000167 dfd9      	RCALL __DIVD21U
000168 f40e      	BRTC __DIVD211
000169 dfcf      	RCALL __ANEGD1
                 __DIVD211:
00016a 9508      	RET
                 
                 __MODD21:
00016b 94e8      	CLT
00016c ff97      	SBRS R25,7
00016d c009      	RJMP __MODD211
00016e 95a0      	COM  R26
00016f 95b0      	COM  R27
000170 9580      	COM  R24
000171 9590      	COM  R25
000172 5faf      	SUBI R26,-1
000173 4fbf      	SBCI R27,-1
000174 4f8f      	SBCI R24,-1
000175 4f9f      	SBCI R25,-1
000176 9468      	SET
                 __MODD211:
000177 fd77      	SBRC R23,7
000178 dfc0      	RCALL __ANEGD1
000179 dfc7      	RCALL __DIVD21U
00017a 01fd      	MOVW R30,R26
00017b 01bc      	MOVW R22,R24
00017c f40e      	BRTC __MODD212
00017d dfbb      	RCALL __ANEGD1
                 __MODD212:
00017e 9508      	RET
                 
                 __CHKSIGND:
00017f 94e8      	CLT
000180 ff77      	SBRS R23,7
000181 c002      	RJMP __CHKSD1
000182 dfb6      	RCALL __ANEGD1
000183 9468      	SET
                 __CHKSD1:
000184 ff97      	SBRS R25,7
000185 c00b      	RJMP __CHKSD2
000186 2400      	CLR  R0
000187 95a0      	COM  R26
000188 95b0      	COM  R27
000189 9580      	COM  R24
00018a 9590      	COM  R25
00018b 9611      	ADIW R26,1
00018c 1d80      	ADC  R24,R0
00018d 1d90      	ADC  R25,R0
00018e f800      	BLD  R0,0
00018f 9403      	INC  R0
000190 fa00      	BST  R0,0
                 __CHKSD2:
000191 9508      	RET
                 
                 __GETD1P_INC:
000192 91ed      	LD   R30,X+
000193 91fd      	LD   R31,X+
000194 916d      	LD   R22,X+
000195 917d      	LD   R23,X+
000196 9508      	RET
                 
                 __PUTDP1_DEC:
000197 937e      	ST   -X,R23
000198 936e      	ST   -X,R22
000199 93fe      	ST   -X,R31
00019a 93ee      	ST   -X,R30
00019b 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  19 r1 :   7 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   5 r17:   5 r18:   0 r19:   8 r20:   7 r21:   6 r22:  23 r23:  20 
r24:  22 r25:  14 r26:  24 r27:  15 r28:   1 r29:   1 r30:  74 r31:  22 
x  :  12 y  :  24 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   2 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   8 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :  12 
cp    :   0 cpc   :   1 cpi   :   1 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  22 ld    :  17 ldd   :   0 ldi   :  70 
lds   :   8 lpm   :   9 lsl   :   2 lsr   :   0 mov   :   1 movw  :  11 
mul   :   0 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   0 
ori   :   1 out   :  21 pop   :   3 push  :   3 rcall :  24 ret   :  12 
reti  :   1 rjmp  :  10 rol   :   7 ror   :   0 sbc   :   3 sbci  :  13 
sbi   :   0 sbic  :   1 sbis  :   1 sbiw  :   6 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  19 std   :   0 sts   :   8 sub   :   1 subi  :   4 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 53 out of 116 (45.7%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000338    788     36    824   16384   5.0%
[.dseg] 0x000060 0x00016c      0     12     12    1024   1.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
