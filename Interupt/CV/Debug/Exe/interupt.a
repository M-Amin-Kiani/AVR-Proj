;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;
;// Declare your global variables here
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 000A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000B   lcd_clear();
;PCODE: $0000000F VOL: 0
; 0000 000C   lcd_puts(" :)");
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000D }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0

	.DSEG
_0x3:
	.BYTE 0x4
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0011 {

	.CSEG
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0012     lcd_clear();
;PCODE: $00000018 VOL: 0
; 0000 0013     lcd_puts(" :(");
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0014 }
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0

	.DSEG
_0x4:
	.BYTE 0x4
;
;void main(void)
; 0000 0017 {

	.CSEG
;PCODE: $0000001F VOL: 0
; 0000 0018 // Declare your local variables here
; 0000 0019 
; 0000 001A 
; 0000 001B 
; 0000 001C // Port D initialization
; 0000 001D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 001E DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=P Bit2=P Bit1=T Bit0=T
; 0000 0020 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0021 
; 0000 0022 // External Interrupt(s) initialization
; 0000 0023 // INT0: On
; 0000 0024 // INT0 Mode: Falling Edge
; 0000 0025 // INT1: On
; 0000 0026 // INT1 Mode: Falling Edge
; 0000 0027 // INT2: Off
; 0000 0028 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0029 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002A MCUCSR=(0<<ISC2);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002B GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002C 
; 0000 002D lcd_init(16);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 002E 
; 0000 002F // Global enable interrupts
; 0000 0030 #asm("sei")
;PCODE: $0000002F VOL: 0
	sei
;PCODE: $00000030 VOL: 0
; 0000 0031 
; 0000 0032 while (1)
;PCODE: $00000031 VOL: 0
; 0000 0033       {
; 0000 0034          lcd_putchar('_');
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0035          delay_ms(500);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0036       }
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0037 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
